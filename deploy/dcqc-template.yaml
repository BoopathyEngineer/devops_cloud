AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  DCQC

  Sample SAM Template for DCQC

## More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Parameters:
  Environment:
    Description: Sub environment to deploy the application
    Type: String
    Default: ""

  SubEnv:
    Type: String
    Default: ""
    Description: Sub environment to deploy the application
    MaxLength: 30

  CognitoID:
    Type: String
    Description: cognito deployment

Globals:
  Function:
    Timeout: 600
    MemorySize: 512
    Tracing: Active
    Environment:
      Variables:
        USERTABLE: !Ref DynamoDBUserTable
        USERLOGTABLE: !Ref DynamoDBUserLogTable
        BATCHSTATUS: !Ref DynamoDBUserBatchTable
        # S3BUCKETS: !Ref S3BucketFiles
        FILEPARSERQUEUE : !GetAtt FileparserQueue.QueueName

Conditions:
  Production: !Equals
    - !Ref Environment
    - feature

Resources:
  #: S3 Bucket 
  # S3BucketFiles:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: !Sub dcqc-${Environment}
  #     AccessControl: Private
  #     BucketEncryption:
  #       ServerSideEncryptionConfiguration:
  #         - ServerSideEncryptionByDefault:
  #             SSEAlgorithm: AES256

  #: Scheduler 
  PermissionForAutoSchedulerToInvokeTriggerFunction:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt TriggerFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com

  AutoScheduler:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub dcqc-lambda-${Environment}${SubEnv}
      ScheduleExpression: "cron(0 10 * * ? *)" # 10 o clock at every day
      # ScheduleExpression: "rate(1 minute)" # Trigger every 1 seconds
      State: !If [Production, "ENABLED", "DISABLED"]
      Targets:
        - Arn: !GetAtt TriggerFunction.Arn
          Id: TriggerFunction
  
  PermissionForMailSchedulerToInvokeTriggerFunction:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MailLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com

  MailScheduler:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub scheduler-${Environment}${SubEnv}
      ScheduleExpression: "cron(0 10 * * ? *)" # 10 o clock at every day
      # ScheduleExpression: "rate(1 minute)" # Trigger every 1 seconds
      State: !If [Production, "ENABLED", "DISABLED"]
      Targets:
        - Arn: !GetAtt MailLambdaFunction.Arn
          Id: MailLambdaFunction
  
  
  # triggering the function for getting refresh token.
  PermissionForRefreshtokenToInvokeRefreshtokenFunction:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt RefreshtokenFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com 
  Refreshtoken:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub refreshtoken-${Environment}${SubEnv}
      ScheduleExpression: "cron(30 18 * * ? *)" # 12.00 in IST
      State: !If [Production, "ENABLED", "DISABLED"]
      Targets:
        - Arn: !GetAtt RefreshtokenFunction.Arn
          Id: RefreshtokenFunction

  RefreshtokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub refreshtoken-${Environment}${SubEnv}
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ../src/
      Handler: app.refresh_token_both
      Runtime: python3.9 
    # DependsOn: LambdaLogGroup


  #: LambdaFunction 
  TriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub dcqc-${Environment}${SubEnv}
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ../src/
      Handler: app.lambda_handler
      Runtime: python3.9
    # DependsOn: LambdaLogGroup
  
  # Authenticaton Function
  AuthGoogleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub google-${Environment}${SubEnv}
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ../src/
      Handler: app.google_handler
      Runtime: python3.9
      Events:
        LambdaHandlerAPI:
          Type: Api 
          Properties:
            # RestApiId : !Ref MyApiGateway
            Path: /GoogleIntegration
            Method: ANY
    # DependsOn: LambdaLogGroup

  AuthOutlookFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub outlook-${Environment}${SubEnv}
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ../src/
      Handler: app.Outlook_handler
      Runtime: python3.9
      Events:
        LambdaHandlerAPI:
          Type: Api 
          Properties:
            # RestApiId : !Ref MyApiGateway
            Path:  /OutlookIntegration
            Method: ANY


  
  QueueLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub queue-${Environment}${SubEnv}
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ../src/
      Handler: app.queue_handler
      Runtime: python3.9
    # DependsOn: LambdaLogGroup

  MailLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub mail-${Environment}${SubEnv}
      Role: !GetAtt LambdaRole.Arn
      CodeUri: ../src/
      Handler: app.email_handler
      Runtime: python3.9
    # DependsOn: LambdaLogGroup
  
  #: LambdaRole 
  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub dcqc-lambda-${Environment}-${SubEnv}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - scheduler.amazonaws.com
                - events.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        - "arn:aws:iam::aws:policy/AdministratorAccess"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator"
        - "arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess"
      Policies:
        - PolicyName: !Sub dcqc-lambda-${Environment}${SubEnv}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"
        - PolicyName: LambdaLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"
        - PolicyName: LambdaSQSPolicy
          PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "sqs:ReceiveMessage"
                    - "sqs:DeleteMessage"
                    - "sqs:GetQueueAttributes"
                  Resource: !GetAtt FileparserQueue.Arn

  DynamoDBUserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub user-${Environment}${SubEnv}
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S # String
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: environment
          Value: !Ref Environment
      SSESpecification:
        SSEEnabled: true

  DynamoDBUserLogTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub userlog-${Environment}${SubEnv}
      KeySchema:
        - AttributeName: email
          KeyType: HASH
        - AttributeName: date 
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S 
        - AttributeName: date
          AttributeType: S 
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: environment
          Value: !Ref Environment
      SSESpecification:
        SSEEnabled: true
  
  DynamoDBUserBatchTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub batch-status-${Environment}${SubEnv}
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S # String
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: environment
          Value: !Ref Environment
      SSESpecification:
        SSEEnabled: true

  #: QUEUE ADDED
  FileparserQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub queue-${Environment}${SubEnv}
      VisibilityTimeout: 600 # 10 min
      KmsMasterKeyId: alias/aws/sqs

  #: Event Mapping
  MyEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      EventSourceArn: !GetAtt FileparserQueue.Arn
      FunctionName: !GetAtt QueueLambdaFunction.Arn
      Enabled: !If [Production, "true", "false"]

Outputs:
  CognitoID:
    Description: CognitoID of the Cognito User Pool in Testing
    Value: !Sub ${CognitoID}
  QueueName:
    Description: "The name of the created SQS Queue"
    Value: !GetAtt FileparserQueue.QueueName
