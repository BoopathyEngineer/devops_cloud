AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM template for GXP environment

Globals:
  Function:
    Timeout: 10 
    Runtime: python3.9  
    MemorySize: 128

Resources:
  MyLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      CodeUri: ./src
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          ENV: !Ref Environment
          SubEnv: !Ref SubEnv

  MyApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        swagger: "2.0"
        info:
          title: My API
          version: "1.0"
        paths:
          /:
            get:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations"
                httpMethod: POST
                type: aws_proxy

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: "*"

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: The environment (e.g., dev, staging, prod)
  SubEnv:
    Type: String
    Default: general
    Description: Sub-environment, if applicable (e.g., team name or region)
